import os
import asyncio
import httpx
import io
import sqlite3
import json
import logging
import openai
import time
from fastapi import FastAPI, Request, HTTPException
from telegram import Update
from telegram.constants import ChatAction
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from google.oauth2 import service_account
from googleapiclient.discovery import build
from openai import AsyncOpenAI
import speech_recognition as sr
import requests
from contextlib import closing
from httpx import TimeoutException
from typing import Optional
import uvicorn

# Configurar logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Crear la aplicaci√≥n FastAPI
app = FastAPI()

class CoachBot:
    def __init__(self):
        required_env_vars = {
            'TELEGRAM_TOKEN': os.getenv('TELEGRAM_TOKEN'),
            'SPREADSHEET_ID': os.getenv('SPREADSHEET_ID'),
            'ASSISTANT_ID': os.getenv('ASSISTANT_ID'),
            'OPENAI_API_KEY': os.getenv('OPENAI_API_KEY')
        }

        missing_vars = [var for var, value in required_env_vars.items() if not value]
        if missing_vars:
            raise EnvironmentError(f"Faltan variables de entorno requeridas: {', '.join(missing_vars)}")

        self.TELEGRAM_TOKEN = required_env_vars['TELEGRAM_TOKEN']
        self.SPREADSHEET_ID = required_env_vars['SPREADSHEET_ID']
        self.assistant_id = required_env_vars['ASSISTANT_ID']
        self.credentials_path = '/etc/secrets/credentials.json'

        self.client = AsyncOpenAI(api_key=required_env_vars['OPENAI_API_KEY'])

        self.sheets_service = None
        self.started = False
        self.verified_users = {}
        self.conversation_history = {}
        self.user_threads = {}
        self.db_path = 'bot_data.db'

        self.telegram_app = Application.builder().token(self.TELEGRAM_TOKEN).build()

        self._init_db()
        self.setup_handlers()
        self._init_sheets()

    def setup_handlers(self):
        try:
            self.telegram_app.add_handler(CommandHandler("start", self.start_command))
            self.telegram_app.add_handler(CommandHandler("help", self.help_command))
            self.telegram_app.add_handler(MessageHandler(
                filters.TEXT & ~filters.COMMAND,
                self.route_message
            ))
            self.telegram_app.add_handler(MessageHandler(
                filters.VOICE,
                self.handle_voice_message
            ))
            logger.info("Handlers configurados correctamente")
        except Exception as e:
            logger.error(f"Error en setup_handlers: {e}")
            raise

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            help_text = "ü§ñ *Comandos disponibles:*\n/start - Iniciar\n/help - Ayuda"
            await update.message.reply_text(help_text, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"Error en help_command: {e}")
            await update.message.reply_text("‚ùå Error mostrando la ayuda. Intenta de nuevo.")

    def _init_db(self):
        try:
            with closing(sqlite3.connect(self.db_path)) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS users (
                        chat_id INTEGER PRIMARY KEY,
                        email TEXT NOT NULL UNIQUE,
                        username TEXT
                    )
                ''')
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS conversations (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        chat_id INTEGER,
                        role TEXT,
                        content TEXT,
                        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                        FOREIGN KEY (chat_id) REFERENCES users (chat_id)
                    )
                ''')
                conn.commit()
        except Exception as e:
            logger.error(f"Error inicializando base de datos: {e}")
            raise

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
       """Maneja el comando /start"""
    try:
        chat_id = update.message.chat.id
        if chat_id in self.verified_users:
            await update.message.reply_text("üëã ¬°Bienvenido de nuevo! ¬øEn qu√© puedo ayudarte hoy?")
        else:
            await update.message.reply_text(
                "üëã ¬°Hola! Por favor, proporciona tu email para comenzar.\n"
                "üìß Debe ser un email autorizado para usar el servicio."
            )
        logger.info(f"Comando /start ejecutado por chat_id: {chat_id}")
    except Exception as e:
        logger.error(f"Error en start_command: {e}")
        await update.message.reply_text("‚ùå Ocurri√≥ un error. Por favor, intenta de nuevo.")

    async def send_message_to_assistant(self, chat_id: int, user_message: str) -> str:
    """Env√≠a un mensaje al asistente de OpenAI y espera su respuesta."""
    try:
        thread_id = await self.get_or_create_thread(chat_id)
        if not thread_id:
            return "‚ùå No se pudo establecer conexi√≥n con el asistente."

        # Esperar a que no haya run activo
        timeout = 30  # Timeout m√°s corto para verificar runs activos
        start_time = time.time()
        while time.time() - start_time <= timeout:
            active_runs = await self.client.beta.threads.runs.list(thread_id=thread_id)
            if not any(run.status == "in_progress" for run in active_runs.data):
                break
            await asyncio.sleep(2)
        else:
            raise TimeoutError("‚è≥ Timeout esperando runs activos.")

        # Enviar mensaje del usuario
        await self.client.beta.threads.messages.create(
            thread_id=thread_id,
            role="user",
            content=user_message
        )

        # Iniciar ejecuci√≥n
        run = await self.client.beta.threads.runs.create(
            thread_id=thread_id,
            assistant_id=self.assistant_id
        )

        # Esperar respuesta con timeout
        timeout = 60
        start_time = time.time()
        while time.time() - start_time <= timeout:
            run_status = await self.client.beta.threads.runs.retrieve(
                thread_id=thread_id,
                run_id=run.id
            )

            if run_status.status == "completed":
                break
            elif run_status.status in ["failed", "cancelled", "expired"]:
                logger.error(f"üö® Run fallido con estado: {run_status.status}")
                return f"‚ö†Ô∏è Error: El asistente fall√≥ con estado {run_status.status}."

            await asyncio.sleep(2)
        else:
            raise TimeoutError("‚è≥ La consulta al asistente tom√≥ demasiado tiempo.")

        # Obtener respuesta
        messages = await self.client.beta.threads.messages.list(
            thread_id=thread_id,
            order="desc",
            limit=1
        )

        if not messages.data or not messages.data[0].content:
            logger.warning("‚ö†Ô∏è OpenAI devolvi√≥ una respuesta vac√≠a.")
            return "‚ö†Ô∏è No obtuve una respuesta v√°lida del asistente. Intenta de nuevo."

        return messages.data[0].content[0].text.value.strip()

    except TimeoutError as e:
        logger.error(f"‚è≥ TimeoutError: {e}")
        return "‚è≥ El asistente tard√≥ demasiado en responder. Intenta de nuevo m√°s tarde."
    except Exception as e:
        logger.error(f"‚ùå Error procesando mensaje: {e}")
        return "‚ö†Ô∏è Ocurri√≥ un error al procesar tu mensaje."

async def handle_voice_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Maneja los mensajes de voz recibidos por el usuario"""
    try:
        chat_id = update.message.chat.id
        voice_file = await update.message.voice.get_file()
        voice_file_path = f"{chat_id}_voice_note.ogg"

        try:
            await voice_file.download(voice_file_path)

            recognizer = sr.Recognizer()
            with sr.AudioFile(voice_file_path) as source:
                audio = recognizer.record(source)

            user_message = recognizer.recognize_google(audio, language='es-ES')
            logger.info(f"Transcripci√≥n de voz: {user_message}")

            response = await self.process_text_message(update, context, user_message)
            await update.message.reply_text(response)

        finally:
            # Limpiar archivo temporal
            if os.path.exists(voice_file_path):
                os.remove(voice_file_path)

    except sr.UnknownValueError:
        await update.message.reply_text("‚ö†Ô∏è No pude entender la nota de voz. Intenta de nuevo.")
    except sr.RequestError as e:
        logger.error(f"Error en reconocimiento de voz: {e}")
        await update.message.reply_text("‚ö†Ô∏è Ocurri√≥ un error con el servicio de reconocimiento de voz.")
    except Exception as e:
        logger.error(f"Error manejando mensaje de voz: {e}")
        await update.message.reply_text("‚ö†Ô∏è Ocurri√≥ un error procesando la nota de voz.")

    async def process_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_message: str) -> str:
    """Procesa los mensajes de texto recibidos."""
    try:
        chat_id = update.message.chat.id
        
        if not user_message.strip():
            return "‚ö†Ô∏è No se recibi√≥ un mensaje v√°lido."

        await context.bot.send_chat_action(
            chat_id=chat_id,
            action=ChatAction.TYPING
        )

        # Verificar consulta de productos
        if any(keyword in user_message.lower() for keyword in ['producto', 'comprar', 'precio', 'costo']):
            return await self.process_product_query(chat_id, user_message)

        # Usar asistente de OpenAI
        response = await self.send_message_to_assistant(chat_id, user_message)
        
        if not response.strip():
            return "‚ö†Ô∏è No se obtuvo una respuesta v√°lida del asistente."

        # Guardar conversaci√≥n
        self.save_conversation(chat_id, "user", user_message)
        self.save_conversation(chat_id, "assistant", response)
        
        return response

    except Exception as e:
        logger.error(f"‚ùå Error en process_text_message: {e}", exc_info=True)
        return "‚ö†Ô∏è Ocurri√≥ un error al procesar tu mensaje."

async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Maneja los mensajes recibidos despu√©s de la verificaci√≥n."""
    try:
        chat_id = update.message.chat.id
        user_message = update.message.text.strip()

        if not user_message:
            await update.message.reply_text("‚ö†Ô∏è No se recibi√≥ un mensaje v√°lido.")
            return

        response = await self.process_text_message(update, context, user_message)
        if response.strip():
            await update.message.reply_text(response)
        else:
            await update.message.reply_text("‚ö†Ô∏è No se obtuvo una respuesta v√°lida.")

    except Exception as e:
        logger.error(f"‚ùå Error inesperado en handle_message: {e}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è Ocurri√≥ un error inesperado.")

async def verify_email(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Verifica el email del usuario"""
    try:
        chat_id = update.message.chat.id
        user_email = update.message.text.strip().lower()
        username = update.message.from_user.username or "Unknown"

        if "@" not in user_email or "." not in user_email:
            await update.message.reply_text("‚ùå Por favor, proporciona un email v√°lido.")
            return

        # Verificar si el usuario est√° en la lista blanca
        if not await self.is_user_whitelisted(user_email):
            await update.message.reply_text(
                "‚ùå Tu email no est√° en la lista autorizada. Contacta a soporte."
            )
            return

        thread_id = await self.get_or_create_thread(chat_id)
        if thread_id:
            self.user_threads[chat_id] = thread_id

        self.save_verified_user(chat_id, user_email, username)
        await update.message.reply_text("‚úÖ Email validado. Ahora puedes hablar conmigo.")

    except Exception as e:
        logger.error(f"‚ùå Error verificando email para {chat_id}: {e}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è Ocurri√≥ un error verificando tu email.")

async def is_user_whitelisted(self, email: str) -> bool:
    """
    Verifica si el correo electr√≥nico del usuario est√° en la lista blanca.
    Args:
        email (str): Direcci√≥n de correo del usuario.
    Returns:
        bool: True si el correo est√° en la lista blanca, False en caso contrario.
    """
    if not email or "@" not in email:
        logger.warning("‚ùå Email inv√°lido proporcionado para verificaci√≥n en la whitelist.")
        return False

    try:
        result = self.sheets_service.spreadsheets().values().get(
            spreadsheetId=self.SPREADSHEET_ID,
            range='Usuarios!A:A'
        ).execute()

        values = result.get('values', [])
        if not values:
            logger.warning("‚ö†Ô∏è La whitelist est√° vac√≠a.")
            return False

        whitelist = {row[0].strip().lower() for row in values if row and row[0]}
        return email.strip().lower() in whitelist

    except Exception as e:
        logger.error(f"‚ùå Error verificando la whitelist: {str(e)}", exc_info=True)
        return False

# Inicializar el bot con manejo adecuado de errores
def init_bot() -> Optional[CoachBot]:
    try:
        bot = CoachBot()
        logger.info("‚úÖ Bot inicializado correctamente")
        return bot

    except Exception as e:
        logger.error(f"üö® Error cr√≠tico inicializando el bot: {str(e)}", exc_info=True)
        return None

bot = init_bot()
if not bot:
    raise RuntimeError("‚ùå No se pudo inicializar el bot.")

@app.on_event("startup")
async def startup_event():
    """Manejador del evento de inicio de la aplicaci√≥n."""
    try:
        await bot.async_init()
        logger.info("‚úÖ Aplicaci√≥n iniciada correctamente")
    except Exception as e:
        logger.error(f"üö® Error al iniciar la aplicaci√≥n: {str(e)}", exc_info=True)
        raise RuntimeError(f"‚ùå Fallo en el inicio de la aplicaci√≥n: {str(e)}")

@app.post("/webhook")
async def webhook(request: Request):
    """Manejador del webhook de Telegram."""
    try:
        if not bot:
            raise HTTPException(status_code=500, detail="‚ùå El bot no est√° inicializado.")

        data = await request.json()
        if not data:
            raise HTTPException(status_code=400, detail="‚ùå Datos de solicitud no v√°lidos.")

        update = Update.de_json(data, bot.telegram_app.bot)
        await bot.telegram_app.update_queue.put(update)
        return {"status": "ok"}

    except ValueError as e:
        logger.error(f"‚ùå JSON inv√°lido en la solicitud del webhook: {str(e)}", exc_info=True)
        raise HTTPException(status_code=400, detail="‚ùå Formato de JSON no v√°lido.")

    except Exception as e:
        logger.error(f"‚ùå Error procesando webhook: {str(e)}", exc_info=True)
        raise HTTPException(status_code=500, detail=str(e))

if __name__ == "__main__":
    import uvicorn

    # Obtener el puerto del ambiente o usar un valor por defecto
    port = int(os.getenv("PORT", 8000))

    # Configurar uvicorn
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=port,
        reload=False  # Deshabilitar reload en producci√≥n
    )
